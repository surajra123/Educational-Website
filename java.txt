<h2>Java Programming</h2>
<h3>Java - Overview</h3>
<p>Java programming language was originally developed by Sun Microsystems which was initiated by James Gosling and released in 1995 as core component of Sun Microsystems' Java platform (Java 1.0 [J2SE]).</p>

<p>The latest release of the Java Standard Edition is Java SE 8. With the advancement of Java and its widespread popularity, multiple configurations were built to suit various types of platforms. For example: J2EE for Enterprise Applications, J2ME for Mobile Applications.</p>

<p>The new J2 versions were renamed as Java SE, Java EE, and Java ME respectively. Java is guaranteed to be Write Once, Run Anywhere.</p>

<p>Java is −</p>
<ul>
<li><b>Object Oriented − </b>In Java, everything is an Object. Java can be easily extended since it is based on the Object model.

<li><b>Platform Independent −</b> Unlike many other programming languages including C and C++, when Java is compiled, it is not compiled into platform specific machine, rather into platform independent byte code. This byte code is distributed over the web and interpreted by the Virtual Machine (JVM) on whichever platform it is being run on.

<li><b>Simple −</b> Java is designed to be easy to learn. If you understand the basic concept of OOP Java, it would be easy to master.

<li><b>Secure − </b>With Java's secure feature it enables to develop virus-free, tamper-free systems. Authentication techniques are based on public-key encryption.

<li><b>Architecture-neutral − </b>Java compiler generates an architecture-neutral object file format, which makes the compiled code executable on many processors, with the presence of Java runtime system.

<li><b>Portable − </b>Being architecture-neutral and having no implementation dependent aspects of the specification makes Java portable. Compiler in Java is written in ANSI C with a clean portability boundary, which is a POSIX subset.

<li><b>Robust − </b>Java makes an effort to eliminate error prone situations by emphasizing mainly on compile time error checking and runtime checking.

<li><b>Multithreaded −</b> With Java's multithreaded feature it is possible to write programs that can perform many tasks simultaneously. This design feature allows the developers to construct interactive applications that can run smoothly.

<li><b>Interpreted −</b> Java byte code is translated on the fly to native machine instructions and is not stored anywhere. The development process is more rapid and analytical since the linking is an incremental and light-weight process.

<li><b>High Performance −</b> With the use of Just-In-Time compilers, Java enables high performance.

<li><b>Distributed −</b> Java is designed for the distributed environment of the internet.

<li><b>Dynamic −</b> Java is considered to be more dynamic than C or C++ since it is designed to adapt to an evolving environment. Java programs can carry extensive amount of run-time information that can be used to verify and resolve accesses to objects on run-time.
</ul>

<h3>History of Java</h3>
<p>James Gosling initiated Java language project in June 1991 for use in one of his many set-top box projects. The language, initially called ‘Oak’ after an oak tree that stood outside Gosling's office, also went by the name ‘Green’ and ended up later being renamed as Java, from a list of random words.</p>

<p>Sun released the first public implementation as Java 1.0 in 1995. It promised Write Once, Run Anywhere (WORA), providing no-cost run-times on popular platforms.</p>

<p>On 13 November, 2006, Sun released much of Java as free and open source software under the terms of the GNU General Public License (GPL).</p>

<p>On 8 May, 2007, Sun finished the process, making all of Java's core code free and open-source, aside from a small portion of code to which Sun did not hold the copyright.</p>

<h3>Java - Basic Syntax</h3>
<p>When we consider a Java program, it can be defined as a collection of objects that communicate via invoking each other's methods. Let us now briefly look into what do class, object, methods, and instance variables mean.</p>
<ul>
<li><b>Object −</b> Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behavior such as wagging their tail, barking, eating. An object is an instance of a class.

<li><b>Class − </b>A class can be defined as a template/blueprint that describes the behavior/state that the object of its type supports.

<li><b>Methods −</b> A method is basically a behavior. A class can contain many methods. It is in methods where the logics are written, data is manipulated and all the actions are executed.

<li><b>Instance Variables −</b> Each object has its unique set of instance variables. An object's state is created by the values assigned to these instance variables.
</ul>

<h3>First Java Program</h3>
<p>Let us look at a simple code that will print the words Hello World.</p>
<p>
<b>Example</b><br>

public class MyFirstJavaProgram {<br>

   /* This is my first java program.<br>
    * This will print 'Hello World' as the output<br>
    */<br>

   public static void main(String []args) {<br>
      System.out.println("Hello World"); // prints Hello World<br>
   }<br>
}<br>
</p>
<p>Let's look at how to save the file, compile, and run the program. Please follow the subsequent steps −</p>
<ul>
<li>Open notepad and add the code as above.

<li>Save the file as: MyFirstJavaProgram.java.

<li>Open a command prompt window and go to the directory where you saved the class. Assume it's C:\.

<li>Type 'javac MyFirstJavaProgram.java' and press enter to compile your code. If there are no errors in your code, the command prompt will take you to the next line (Assumption : The path variable is set).

<li>Now, type ' java MyFirstJavaProgram ' to run your program.

<li>You will be able to see ' Hello World ' printed on the window.
</ul>
<b>Output</b><br>
C:\> javac MyFirstJavaProgram.java<br>
C:\> java MyFirstJavaProgram<br> 
Hello World

<h3>Basic Syntax</h3>
<p>About Java programs, it is very important to keep in mind the following points.</p>
<ul>
<li><b>Case Sensitivity −</b> Java is case sensitive, which means identifier Hello and hello would have different meaning in Java.

<li><b>Class Names −</b> For all class names the first letter should be in Upper Case. If several words are used to form a name of the class, each inner word's first letter should be in Upper Case.<br>

<b>Example:</b> class MyFirstJavaClass

<li><b>Method Names −</b> All method names should start with a Lower Case letter. If several words are used to form the name of the method, then each inner word's first letter should be in Upper Case.<br>

<b>Example:</b> public void myMethodName()

<li><b>Program File Name −</b> Name of the program file should exactly match the class name.<br>

When saving the file, you should save it using the class name (Remember Java is case sensitive) and append '.java' to the end of the name (if the file name and the class name do not match, your program will not compile).<br>
<b>Example:</b> Assume 'MyFirstJavaProgram' is the class name. Then the file should be saved as 'MyFirstJavaProgram.java'

<li><b>public static void main(String args[]) − </b>Java program processing starts from the main() method which is a mandatory part of every Java program.
</ul>

<h3>Java Identifiers</h3>
<p>All Java components require names. Names used for classes, variables, and methods are called <b>identifiers.</b></p>

<p>In Java, there are several points to remember about identifiers. They are as follows −</p>
<ul>
<li>All identifiers should begin with a letter (A to Z or a to z), currency character ($) or an underscore (_).

<li>After the first character, identifiers can have any combination of characters.

<li>A key word cannot be used as an identifier.

<li>Most importantly, identifiers are case sensitive.

<li>Examples of legal identifiers: age, $salary, _value, __1_value.

<li>Examples of illegal identifiers: 123abc, -salary.
</ul>

<h3>Java Modifiers</h3>
<p>Like other languages, it is possible to modify classes, methods, etc., by using modifiers. There are two categories of modifiers −</p>
<ul>
<li><b>Access Modifiers − </b>default, public , protected, private

<li><b>Non-access Modifiers −</b> final, abstract, strictfp
</ul>

<h3>Java Variables</h3>
<p>Following are the types of variables in Java −</p>
<ul>
<li>Local Variables
<li>Class Variables (Static Variables)
<li>Instance Variables (Non-static Variables)
</ul>

<h3>Java Arrays</h3>
<p>Arrays are objects that store multiple variables of the same type. However, an array itself is an object on the heap. We will look into how to declare, construct, and initialize in the upcoming chapters.</p>

<h3>Java Enums</h3>
<p>Enums were introduced in Java 5.0. Enums restrict a variable to have one of only a few predefined values. The values in this enumerated list are called enums.</p>

<p>With the use of enums it is possible to reduce the number of bugs in your code.</p>

<p>For example, if we consider an application for a fresh juice shop, it would be possible to restrict the glass size to small, medium, and large. This would make sure that it would not allow anyone to order any size other than small, medium, or large.</p>
<p><b>Example</b><br>
class FreshJuice {<br>
   enum FreshJuiceSize{ SMALL, MEDIUM, LARGE }<br>
   FreshJuiceSize size;<br>
}<br>

public class FreshJuiceTest {<br>

   public static void main(String args[]) {<br>
      FreshJuice juice = new FreshJuice();<br>
      juice.size = FreshJuice.FreshJuiceSize.MEDIUM ;<br>
      System.out.println("Size: " + juice.size);<br>
   }<br>
}
</p>
<p>The above example will produce the following result −</p>
<b>Output</b><br>
Size: MEDIUM

<p>Note − Enums can be declared as their own or inside a class. Methods, variables, constructors can be defined inside enums as well.</p>

<h3>Java Keywords</h3>
<p>The following list shows the reserved words in Java. These reserved words may not be used as constant or variable or any other identifier names.</p>
<table>
<tr>
<td>abstract</td>	<td>assert</td>	<td>boolean</td>	<td>break<td>
</tr>
<tr>
<td>byte</td>	<td>case</td>	<td>catch</td>	<td>char</td>
</tr>
<tr>
<td>class</td>	<td>const</td>	<td>continue</td>	<td>default<th/>
</tr>
<tr>
<td>do</td>	<td>double</td>	<td>else</td>	<td>enum</td>
</tr>
<tr>
<td>extends</td>	<td>final</td>	<td>finally</td>	<td>float</td>
</tr>
<tr>
<td>for</td>	<td>goto</td>	<td>if</td>	<td>implements</td>
</tr>
<tr>
<td>import</td>	<td>instanceof</td>	<td>int</td>	<td>interface</td>
</tr>
<tr>
<td>long</td>	<td>native</td>	<td>new</td>	<td>package</td>
</tr>
<tr>
<td>private</td>	<td>protected</td>	<td>public</td>	<td>return</td>
</tr>
<tr>
<td>short</td>	<td>static</td>	<td>strictfp</td>	<td>super</td>
</tr>
<tr>
<td>switch</td>	<td>synchronized</td>	<td>this</td>	<td>throw</td>
</tr>
<tr>
<td>throws</td>	<td>transient</td>	<td>try</td>	<td>void</td>
</tr>
<tr>
<td>volatile</td>	<td>while</td>
</tr>
</table>
<br>
<h3>Comments in Java</h3>
<p>Java supports single-line and multi-line comments very similar to C and C++. All characters available inside any comment are ignored by Java compiler.</p>
<p><b>Example</b><br>
public class MyFirstJavaProgram {<br>

   /* This is my first java program.<br>
    * This will print 'Hello World' as the output<br>
    * This is an example of multi-line comments.<br>
    */<br>

   public static void main(String []args) {<br>
      // This is an example of single line comment<br>
      /* This is also an example of single line comment. */<br>
      System.out.println("Hello World");<br>
   }<br>
}
</p>
<p><b>Output</b><br>
Hello World
</p>

<h3>Using Blank Lines</h3>
<p>A line containing only white space, possibly with a comment, is known as a blank line, and Java totally ignores it.</p>

<h3>Inheritance</h3>
<p>In Java, classes can be derived from classes. Basically, if you need to create a new class and here is already a class that has some of the code you require, then it is possible to derive your new class from the already existing code.</p>

<p>This concept allows you to reuse the fields and methods of the existing class without having to rewrite the code in a new class. In this scenario, the existing class is called the superclass and the derived class is called the subclass.</p>

<h3>Interfaces</h3>
<p>In Java language, an interface can be defined as a contract between objects on how to communicate with each other. Interfaces play a vital role when it comes to the concept of inheritance.</p>

<p>An interface defines the methods, a deriving class (subclass) should use. But the implementation of the methods is totally up to the subclass.</p>

<h3>Java - Object and Classes</h3>
<p>Java is an Object-Oriented Language. As a language that has the Object-Oriented feature, Java supports the following fundamental concepts −</p>
<ul>
<li>Polymorphism
<li>Inheritance
<li>Encapsulation
<li>Abstraction
<li>Classes
<li>Objects
<li>Instance
<li>Method
<li>Message Passing
</ul>
<p>In this chapter, we will look into the concepts - Classes and Objects.</p>
<ul>
<li><b>Object −</b> Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behaviors – wagging the tail, barking, eating. An object is an instance of a class.

<li><b>Class −</b> A class can be defined as a template/blueprint that describes the behavior/state that the object of its type support.
</ul>

<h3>Objects in Java</h3>
<p>Let us now look deep into what are objects. If we consider the real-world, we can find many objects around us, cars, dogs, humans, etc. All these objects have a state and a behavior.</p>

<p>If we consider a dog, then its state is - name, breed, color, and the behavior is - barking, wagging the tail, running.</p>

<p>If you compare the software object with a real-world object, they have very similar characteristics.</p>

<p>Software objects also have a state and a behavior. A software object's state is stored in fields and behavior is shown via methods.</p>

<p>So in software development, methods operate on the internal state of an object and the object-to-object communication is done via methods.</p>

<h3>Classes in Java</h3>
<p>A class is a blueprint from which individual objects are created.</p>

<p>Following is a sample of a class.</p>
<p>
<b>Example</b><br>
public class Dog {<br>
   String breed;<br>
   int age;<br>
   String color;<br>

   void barking() {<br>
   }<br>

   void hungry() {<br>
   }<br>

   void sleeping() {<br>
   }<br>
}
</p>
<p>A class can contain any of the following variable types.</p>
<ul>

<li><b>Local variables −</b> Variables defined inside methods, constructors or blocks are called local variables. The variable will be declared and initialized within the method and the variable will be destroyed when the method has completed.

<li><b>Instance variables − </b>Instance variables are variables within a class but outside any method. These variables are initialized when the class is instantiated. Instance variables can be accessed from inside any method, constructor or blocks of that particular class.

<li><b>Class variables −</b> Class variables are variables declared within a class, outside any method, with the static keyword.
</ul>
<p>A class can have any number of methods to access the value of various kinds of methods. In the above example, barking(), hungry() and sleeping() are methods.
</p>

<h3>Constructors</h3>
<p>When discussing about classes, one of the most important sub topic would be constructors. Every class has a constructor. If we do not explicitly write a constructor for a class, the Java compiler builds a default constructor for that class.</p>

<p>Each time a new object is created, at least one constructor will be invoked. The main rule of constructors is that they should have the same name as the class. A class can have more than one constructor.</p>

<p>Following is an example of a constructor −</p>

<p><b>Example</b><br>
public class Puppy {<br>
   public Puppy() {<br>
   }<br>

   public Puppy(String name) {<br>
      // This constructor has one parameter, name.<br>
   }<br>
}
<p>Java also supports Singleton Classes where you would be able to create only one instance of a class.</p>
</p>
<p>
Note − We have two different types of constructors. </p>

<h3>Creating an Object</h3>
<p>As mentioned previously, a class provides the blueprints for objects. So basically, an object is created from a class. In Java, the new keyword is used to create new objects.</p>

<p>There are three steps when creating an object from a class −</p>
<ul>
<li><b>Declaration − </b>A variable declaration with a variable name with an object type.

<li><b>Instantiation −</b> The 'new' keyword is used to create the object.

<li><b>Initialization − </b>The 'new' keyword is followed by a call to a constructor. This call initializes the new object.
</ul>
<p>Following is an example of creating an object −</p>
<p><b>Example</b><br>

public class Puppy {<br>
   public Puppy(String name) {<br>
      // This constructor has one parameter, name.<br>
      System.out.println("Passed Name is :" + name );<br>
   }<br>

   public static void main(String []args) {<br>
      // Following statement would create an object myPuppy<br>
      Puppy myPuppy = new Puppy( "tommy" );<br>
   }<br>
}
</p>
<p>If we compile and run the above program, then it will produce the following result −</p>
<p><b>
Output</b><br>
Passed Name is :tommy
</p>

<h3>Accessing Instance Variables and Methods</h3>
<p>Instance variables and methods are accessed via created objects. To access an instance variable, following is the fully qualified path −</p>
<p>
/* First create an object */<br>
ObjectReference = new Constructor();<br>

/* Now call a variable as follows */<br>
ObjectReference.variableName;<br>

/* Now you can call a class method as follows */<br>
ObjectReference.MethodName();
</p>
<p>
<b>Example</b><br>
This example explains how to access instance variables and methods of a class.</p>
<p>
public class Puppy {<br>
   int puppyAge;<br>

   public Puppy(String name) {<br>
      // This constructor has one parameter, name.<br>
      System.out.println("Name chosen is :" + name );<br>
   }<br>

   public void setAge( int age ) {<br>
      puppyAge = age;<br>
   }<br>

   public int getAge( ) {<br>
      System.out.println("Puppy's age is :" + puppyAge );<br>
      return puppyAge;<br>
   }<br>

   public static void main(String []args) {<br>
      /* Object creation */<br>
      Puppy myPuppy = new Puppy( "tommy" );<br>

      /* Call class method to set puppy's age */<br>
      myPuppy.setAge( 2 );<br>

      /* Call another class method to get puppy's age */<br>
      myPuppy.getAge( );<br>

      /* You can access instance variable as follows as well */<br>
      System.out.println("Variable Value :" + myPuppy.puppyAge );<br>
   }<br>
}
</p>
<p>
If we compile and run the above program, then it will produce the following result −</p>
<p>
<b>Output</b><br>
Name chosen is :tommy<br>
Puppy's age is :2<br>
Variable Value :2
</p>

<h3>Source File Declaration Rules</h3>
<p>As the last part of this section, let's now look into the source file declaration rules. These rules are essential when declaring classes, import statements and package statements in a source file.</p>
<ul>
<li>There can be only one public class per source file.

<li>A source file can have multiple non-public classes.

<li>The public class name should be the name of the source file as well which should be appended by .java at the end. For example: the class name is public class Employee{} then the source file should be as Employee.java.

<li>If the class is defined inside a package, then the package statement should be the first statement in the source file.

<li>If import statements are present, then they must be written between the package statement and the class declaration. If there are no package statements, then the import statement should be the first line in the source file.

<li>Import and package statements will imply to all the classes present in the source file. It is not possible to declare different import and/or package statements to different classes in the source file.
</ul>
<p>
Classes have several access levels and there are different types of classes; abstract classes, final classes, etc. </p>

<p>Apart from the above mentioned types of classes, Java also has some special classes called Inner classes and Anonymous classes.</p>

<h3>Java Package</h3>
<p>In simple words, it is a way of categorizing the classes and interfaces. When developing applications in Java, hundreds of classes and interfaces will be written, therefore categorizing these classes is a must as well as makes life much easier.</p>

<h3>Import Statements</h3>
<p>In Java if a fully qualified name, which includes the package and the class name is given, then the compiler can easily locate the source code or classes. Import statement is a way of giving the proper location for the compiler to find that particular class.</p>
<p>
For example, the following line would ask the compiler to load all the classes available in directory java_installation/java/io −</p>

import java.io.*;
<br><br>

<h3>A Simple Case Study</h3>
<p>For our case study, we will be creating two classes. They are Employee and EmployeeTest.</p>

<p>First open notepad and add the following code. Remember this is the Employee class and the class is a public class. Now, save this source file with the name Employee.java.</p>

<p>The Employee class has four instance variables - name, age, designation and salary. The class has one explicitly defined constructor, which takes a parameter.</p>
<p>
<b>Example</b><br>
import java.io.*;<br>
public class Employee {<br>

   String name;<br>
   int age;<br>
   String designation;<br>
   double salary;<br>

   // This is the constructor of the class Employee<br>
   public Employee(String name) {<br>
      this.name = name;<br>
   }<br>

   // Assign the age of the Employee  to the variable age.<br>
   public void empAge(int empAge) {<br>
      age = empAge;<br>
   }<br>

   /* Assign the designation to the variable designation.*/<br>
   public void empDesignation(String empDesig) {<br>
      designation = empDesig;<br>
   }<br>

   /* Assign the salary to the variable	salary.*/<br>
   public void empSalary(double empSalary) {<br>
      salary = empSalary;<br>
   }<br>

   /* Print the Employee details */<br>
   public void printEmployee() {<br>
      System.out.println("Name:"+ name );<br>
      System.out.println("Age:" + age );<br>
      System.out.println("Designation:" + designation );<br>
      System.out.println("Salary:" + salary);<br>
   }<br>
}
</p>
<p>
As mentioned previously in this tutorial, processing starts from the main method. Therefore, in order for us to run this Employee class there should be a main method and objects should be created. We will be creating a separate class for these tasks.</p>

<p>Following is the EmployeeTest class, which creates two instances of the class Employee and invokes the methods for each object to assign values for each variable.</p>

<p>Save the following code in EmployeeTest.java file.</p>
<p>
import java.io.*;<br>
public class EmployeeTest {<br>

   public static void main(String args[]) {<br>
      /* Create two objects using constructor */<br>
      Employee empOne = new Employee("James Smith");<br>
      Employee empTwo = new Employee("Mary Anne");<br>

      // Invoking methods for each object created<br>
      empOne.empAge(26);<br>
      empOne.empDesignation("Senior Software Engineer");<br>
      empOne.empSalary(1000);<br>
      empOne.printEmployee();<br>

      empTwo.empAge(21);<br>
      empTwo.empDesignation("Software Engineer");<br>
      empTwo.empSalary(500);<br>
      empTwo.printEmployee();<br>
   }<br>
}
</p>
<p>Now, compile both the classes and then run EmployeeTest to see the result as follows −</p>
<p>
<b>Output</b><br>
C:\> javac Employee.java<br>
C:\> javac EmployeeTest.java<br>
C:\> java EmployeeTest<br>
Name:James Smith<br>
Age:26<br>
Designation:Senior Software Engineer<br>
Salary:1000.0<br>
Name:Mary Anne<br>
Age:21<br>
Designation:Software Engineer<br>
Salary:500.0
</p>

<h3>Java - Constructors</h3>
<p>A constructor initializes an object when it is created. It has the same name as its class and is syntactically similar to a method. However, constructors have no explicit return type.</p>

<p>Typically, you will use a constructor to give initial values to the instance variables defined by the class, or to perform any other start-up procedures required to create a fully formed object.</p>

<p>All classes have constructors, whether you define one or not, because Java automatically provides a default constructor that initializes all member variables to zero. However, once you define your own constructor, the default constructor is no longer used.</p>

<h3>Syntax</h3>
<p>Following is the syntax of a constructor −</p>
<p>
class ClassName {<br>
   ClassName() {<br>
   }<br>
}
</p>

<p>Java allows two types of constructors namely −</p>
<ul>
<li>No argument Constructors
<li>Parameterized Constructors
</ul>

<h3>No argument Constructors</h3>
<p>As the name specifies the no argument constructors of Java does not accept any parameters instead, using these constructors the instance variables of a method will be initialized with fixed values for all objects.</p>
<p>
<b>Example</b><br>
Public class MyClass {<br>
   Int num;<br>
   MyClass() {<br>
      num = 100;<br>
   }<br>
}
</p>
<p>
You would call constructor to initialize objects as follows</p>
<p>
public class ConsDemo {<br>
   public static void main(String args[]) {<br>
      MyClass t1 = new MyClass();<br>
      MyClass t2 = new MyClass();<br>
      System.out.println(t1.num + " " + t2.num);<br>
   }<br>
}
</p>
<p>
This would produce the following result</p>

100 100
<br><br>

<h3>Parameterized Constructors</h3>
<p>Most often, you will need a constructor that accepts one or more parameters. Parameters are added to a constructor in the same way that they are added to a method, just declare them inside the parentheses after the constructor's name.</p>
<p>
<b>Example</b><br>
Here is a simple example that uses a constructor −
<br>
// A simple constructor.<br>
class MyClass {<br>
   int x;<br>
   
   // Following is the constructor<br>
   MyClass(int i ) {<br>
      x = i;<br>
   }<br>
}
</p>
<p>
You would call constructor to initialize objects as follows −</p>
<p>
public class ConsDemo {<br>
   public static void main(String args[]) {<br>
      MyClass t1 = new MyClass( 10 );<br>
      MyClass t2 = new MyClass( 20 );<br>
      System.out.println(t1.x + " " + t2.x);<br>
   }<br>
}
</p>
<p>
This would produce the following result −</p>

10 20
<br><br>

<h3>Java - Basic Datatypes</h3>
<p>Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in the memory.</p>

<p>Based on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different data types to variables, you can store integers, decimals, or characters in these variables.</p>
<p>
There are two data types available in Java −</p>
<ul>
<li>Primitive Data Types
<li>Reference/Object Data Types
</ul>

<h3>Primitive Data Types</h3>
<p>There are eight primitive datatypes supported by Java. Primitive datatypes are predefined by the language and named by a keyword. Let us now look into the eight primitive data types in detail.</p>

<b>
byte</b>
<ul>
<li>Byte data type is an 8-bit signed two's complement integer

<li>Minimum value is -128 (-2^7)

<li>Maximum value is 127 (inclusive)(2^7 -1)

<li>Default value is 0

<li>Byte data type is used to save space in large arrays, mainly in place of integers, since a byte is four times smaller than an integer.

<li>Example: byte a = 100, byte b = -50
</ul>

<b>
short</b>
<ul>
<li>Short data type is a 16-bit signed two's complement integer

<li>Minimum value is -32,768 (-2^15)

<li>Maximum value is 32,767 (inclusive) (2^15 -1)

<li>Short data type can also be used to save memory as byte data type. A short is 2 times smaller than an integer

<li>Default value is 0.

<li>Example: short s = 10000, short r = -20000
</ul>

<b>
int</b>
<ul>
<li>Int data type is a 32-bit signed two's complement integer.

<li>Minimum value is - 2,147,483,648 (-2^31)

<li>Maximum value is 2,147,483,647(inclusive) (2^31 -1)

<li>Integer is generally used as the default data type for integral values unless there is a concern about memory.

<li>The default value is 0

<li>Example: int a = 100000, int b = -200000
</ul>

<b>
long</b>
<ul>
<li>Long data type is a 64-bit signed two's complement integer
<li>Minimum value is -9,223,372,036,854,775,808(-2^63)
<li>Maximum value is 9,223,372,036,854,775,807 (inclusive)(2^63 -1)
<li>This type is used when a wider range than int is needed
<li>Default value is 0L
<li>Example: long a = 100000L, long b = -200000L
</ul>

<b>
float</b>
<ul>
<li>Float data type is a single-precision 32-bit IEEE 754 floating point

<li>Float is mainly used to save memory in large arrays of floating point numbers

<li>Default value is 0.0f

<li>Float data type is never used for precise values such as currency

<li>Example: float f1 = 234.5f
</ul>

<b>double</b>
<ul>
<li>double data type is a double-precision 64-bit IEEE 754 floating point

<li>This data type is generally used as the default data type for decimal values, generally the default choice

<li>Double data type should never be used for precise values such as currency

<li>Default value is 0.0d

<li>Example: double d1 = 123.4
</ul>

<b>boolean</b>
<ul>
<li>boolean data type represents one bit of information
<li>There are only two possible values: true and false
<li>This data type is used for simple flags that track true/false conditions
<li>Default value is false
<li>Example: boolean one = true
</ul>

<b>char</b>
<ul>
<li>char data type is a single 16-bit Unicode character
<li>Minimum value is '\u0000' (or 0)
<li>Maximum value is '\uffff' (or 65,535 inclusive)
<li>Char data type is used to store any character
<li>Example: char letterA = 'A'
</ul>


<h3>Reference Datatypes</h3>
<ul>
<li>Reference variables are created using defined constructors of the classes. They are used to access objects. These variables are declared to be of a specific type that cannot be changed. For example, Employee, Puppy, etc.

<li>Class objects and various type of array variables come under reference datatype.</p>

<li>Default value of any reference variable is null.

<li>A reference variable can be used to refer any object of the declared type or any compatible type.

<li>Example: Animal animal = new Animal("giraffe");
</ul>

<h3>Java Literals</h3>
<p>A literal is a source code representation of a fixed value. They are represented directly in the code without any computation.</p>

<p>Literals can be assigned to any primitive type variable. For example −</p>
<p>
byte a = 68;<br>
char a = 'A';
</p>
<p>
byte, int, long, and short can be expressed in decimal(base 10), hexadecimal(base 16) or octal(base 8) number systems as well.</p>

<p>Prefix 0 is used to indicate octal, and prefix 0x indicates hexadecimal when using these number systems for literals. For example −</p>
<p>
int decimal = 100;<br>
int octal = 0144;<br>
int hexa =  0x64;
</p>

<p>String literals in Java are specified like they are in most other languages by enclosing a sequence of characters between a pair of double quotes. Examples of string literals are −</p>
<p>
<b>Example</b>
"Hello World"<br>
"two\nlines"<br>
"\"This is in quotes\""
</p>
<p>
String and char types of literals can contain any Unicode characters. For example −</p>
<p>
char a = '\u0001';<br>
String a = "\u0001";
</p>
<p>Java language supports few special escape sequences for String and char literals as well. They are −</p>
<table>
<tr>
<th>Notation</th>	<th>Character represented</th>
</tr>
<tr>
<td>\n</td>	<td>Newline (0x0a)</td>
</tr>
<tr>
<td>\r</td>	<td>Carriage return (0x0d)</td>
</tr>
<tr>
<td>\f</td>	<td>Formfeed (0x0c)</td>
</tr>
<tr>
<td>\b</td>	<td>Backspace (0x08)</td>
</tr>
<tr>
<td>\s</td>	<td>Space (0x20)</td>
</tr>
<tr>
<td>\t</td>	<td>tab</td>
</tr>
<tr>
<td>\"</td>	<td>Double quote</td>
</tr>
<tr>
<td>\'</td>	<td>Single quote</td>
</tr>
<tr>
<td>\\</td>	<td>backslash</td>
</tr>
<tr>
<td>\ddd</td>	<td>Octal character (ddd)</td>
</tr>
<tr>
<td>\uxxxx</td>	<td>Hexadecimal UNICODE character (xxxx)</td>
</tr>
</table>
<br>

<h3>Java - Variable Types</h3>
<p>A variable provides us with named storage that our programs can manipulate. Each variable in Java has a specific type, which determines the size and layout of the variable's memory; the range of values that can be stored within that memory; and the set of operations that can be applied to the variable.</p>

<p>You must declare all variables before they can be used. Following is the basic form of a variable declaration −</p>

<p>data type variable [ = value][, variable [ = value] ...] ;<br>
Here data type is one of Java's datatypes and variable is the name of the variable. To declare more than one variable of the specified type, you can use a comma-separated list.</p>

<p>Following are valid examples of variable declaration and initialization in Java −</p>
<p>
<b>Example</b><br>
int a, b, c;         // Declares three ints, a, b, and c.<br>
int a = 10, b = 10;  // Example of initialization<br>
byte B = 22;         // initializes a byte type variable B.<br>
double pi = 3.14159; // declares and assigns a value of PI.<br>
char a = 'A';        // the char variable a iis initialized with value 'a'</p>
<p>There are three kinds of variables in Java −</p>
<ul>
<li>Local variables
<li>Instance variables
<li>Class/Static variables
</ul>

<h3>Local Variables</h3>
<ul>
<li>Local variables are declared in methods, constructors, or blocks.

<li>Local variables are created when the method, constructor or block is entered and the variable will be destroyed once it exits the method, constructor, or block.

<li>Access modifiers cannot be used for local variables.

<li>Local variables are visible only within the declared method, constructor, or block.

<li>Local variables are implemented at stack level internally.

<li>There is no default value for local variables, so local variables should be declared and an initial value should be assigned before the first use.
</ul>

<h3>Instance Variables</h3>
<ul>
<li>Instance variables are declared in a class, but outside a method, constructor or any block.

<li>When a space is allocated for an object in the heap, a slot for each instance variable value is created.

<li>Instance variables are created when an object is created with the use of the keyword 'new' and destroyed when the object is destroyed.

<li>Instance variables hold values that must be referenced by more than one method, constructor or block, or essential parts of an object's state that must be present throughout the class.

<li>Instance variables can be declared in class level before or after use.

<li>Access modifiers can be given for instance variables.

<li>The instance variables are visible for all methods, constructors and block in the class. Normally, it is recommended to make these variables private (access level). However, visibility for subclasses can be given for these variables with the use of access modifiers.

<li>Instance variables have default values. For numbers, the default value is 0, for Booleans it is false, and for object references it is null. Values can be assigned during the declaration or within the constructor.

<li>Instance variables can be accessed directly by calling the variable name inside the class. However, within static methods (when instance variables are given accessibility), they should be called using the fully qualified name. ObjectReference.VariableName.
</ul>

<h3>Class/Static Variables</h3>
<ul>
<li>Class variables also known as static variables are declared with the static keyword in a class, but outside a method, constructor or a block.

<li>There would only be one copy of each class variable per class, regardless of how many objects are created from it.

<li>Static variables are rarely used other than being declared as constants. Constants are variables that are declared as public/private, final, and static. Constant variables never change from their initial value.

<li>Static variables are stored in the static memory. It is rare to use static variables other than declared final and used as either public or private constants.

<li>Static variables are created when the program starts and destroyed when the program stops.

<li>Visibility is similar to instance variables. However, most static variables are declared public since they must be available for users of the class.

<li>Default values are same as instance variables. For numbers, the default value is 0; for Booleans, it is false; and for object references, it is null. Values can be assigned during the declaration or within the constructor. Additionally, values can be assigned in special static initializer blocks.

<li>Static variables can be accessed by calling with the class name ClassName.VariableName.

<li>When declaring class variables as public static final, then variable names (constants) are all in upper case. If the static variables are not public and final, the naming syntax is the same as instance and local variables.
</ul>

<h3>Java - Modifier Types</h3>
<p>Modifiers are keywords that you add to those definitions to change their meanings. Java language has a wide variety of modifiers, including the following −</p>
<ul>
<li>Java Access Modifiers

<li>Non Access Modifiers
</ul>
<p>To use a modifier, you include its keyword in the definition of a class, method, or variable. The modifier precedes the rest of the statement, as in the following example.</p>
<p>
<b>Example</b><br>

public class className {<br>
   // ...<br>
}<br>

private boolean myFlag;<br>
static final double weeks = 9.5;<br>
protected static final int BOXWIDTH = 42;<br>

public static void main(String[] arguments) {<br>
   // body of method<br>
}</p>

<h3>Access Control Modifiers</h3>
</p>Java provides a number of access modifiers to set access levels for classes, variables, methods and constructors. The four access levels are −</p>
<ul>
<li>Visible to the package, the default. No modifiers are needed.
<li>Visible to the class only (private).
<li>Visible to the world (public).
<li>Visible to the package and all subclasses (protected).
</ul>

<h3>Non-Access Modifiers</h3>
<p>Java provides a number of non-access modifiers to achieve many other functionality.</p>
<ul>
<li>The static modifier for creating class methods and variables.

<li>The final modifier for finalizing the implementations of classes, methods, and variables.

<li>The abstract modifier for creating abstract classes and methods.

<li>The synchronized and volatile modifiers, which are used for threads.
</ul>

<h3>Java - Basic Operators</h3>
<p>Java provides a rich set of operators to manipulate variables. We can divide all the Java operators into the following groups −</p>
<ul>
<li>Arithmetic Operators
<li>Relational Operators
<li>Bitwise Operators
<li>Logical Operators
<li>Assignment Operators
<li>Misc Operators
</ul>

<h3>Java - Loop Control</h3>
<p>There may be a situation when you need to execute a block of code several number of times. In general, statements are executed sequentially: The first statement in a function is executed first, followed by the second, and so on.</p>

<p>Programming languages provide various control structures that allow for more complicated execution paths.</p>

<p>A loop statement allows us to execute a statement or group of statements multiple times </p>

<p>Java programming language provides the following types of loop to handle looping requirements.</p>
<table>
<tr>
<th>Sr.No.</th>	<th>Loop & Description</th>
</tr>
<tr>
<td>1</td>	<td>while loop<br>

Repeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body.</td>
</tr>
<tr>
<td>2</td>	<td>for loop<br>
Execute a sequence of statements multiple times and abbreviates the code that manages the loop variable.</td>
</tr>
<tr>
<td>3</td>	<td>do...while loop<br>
Like a while statement, except that it tests the condition at the end of the loop body.</td>
</tr>
</table>
<br>

<h3>Loop Control Statements</h3>
<p>Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed.</p>

<p>Java supports the following control statements. </p>
<table>
<tr>
<th>Sr.No.</th>	<th>Control Statement & Description</th>
</tr>
<tr>
<td>1</td>	<td>break statement<br>
Terminates the loop or switch statement and transfers execution to the statement immediately following the loop or switch.</td>
</tr>
<tr>
<td>2</td>	<td>continue statement<br>
Causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating.</td>
</tr>
</table>
<br>

<h3>Enhanced for loop in Java</h3>
<p>As of Java 5, the enhanced for loop was introduced. This is mainly used to traverse collection of elements including arrays.</p>
<p>
Syntax<br>
Following is the syntax of enhanced for loop −<br>

for(declaration : expression) {<br>
   // Statements<br>
}</p>
<ul>
<li><b>Declaration −</b> The newly declared block variable, is of a type compatible with the elements of the array you are accessing. The variable will be available within the for block and its value would be the same as the current array element.

<li><b>Expression − </b>This evaluates to the array you need to loop through. The expression can be an array variable or method call that returns an array.
</ul>
<p>
<b>Example</b><br>
public class Test {<br>

   public static void main(String args[]) {<br>
      int [] numbers = {10, 20, 30, 40, 50};<br>

      for(int x : numbers ) {<br>
         System.out.print( x );<br>
         System.out.print(",");<br>
      }<br>
      System.out.print("\n");<br>
      String [] names = {"James", "Larry", "Tom", "Lacy"};<br>

      for( String name : names ) {<br>
         System.out.print( name );<br>
         System.out.print(",");<br>
      }<br>
   }<br>
}</p>
<p>
This will produce the following result −<br>

<b>Output</b><br>
10, 20, 30, 40, 50,<br>
James, Larry, Tom, Lacy,
</p>

<h3>Java - Decision Making</h3>
<p>Decision making structures have one or more conditions to be evaluated or tested by the program, along with a statement or statements that are to be executed if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false.</p>

<p>Java programming language provides following types of decision making statements. </p>
<table>
<tr>
<th>Sr.No.</th>	<th>Statement & Description</th>
</tr>
<tr>
<td>1</td>	<td>if statement<br>
An if statement consists of a boolean expression followed by one or more statements.</td>
</tr>
<tr>
<td>2</td>	<td>if...else statement<br>
An if statement can be followed by an optional else statement, which executes when the boolean expression is false.</td>
</tr>
<tr>
<td>3</td>	<td>nested if statement<br>
You can use one if or else if statement inside another if or else if statement(s).</td>
</tr>
<tr>
<td>4</td>	<td>switch statement<br>
A switch statement allows a variable to be tested for equality against a list of values.</td>
</tr>
</table>
<br>

<h3>The ? : Operator</h3>
<p>We have covered conditional operator ? : in the previous chapter which can be used to replace if...else statements. It has the following general form −<br>

Exp1 ? Exp2 : Exp3;</p>
<p>
Where Exp1, Exp2, and Exp3 are expressions. Notice the use and placement of the colon.</p>

<p>To determine the value of the whole expression, initially exp1 is evaluated.</p>
<ul>
<li>If the value of exp1 is true, then the value of Exp2 will be the value of the whole expression.

<li>If the value of exp1 is false, then Exp3 is evaluated and its value becomes the value of the entire expression.
</ul>

<h3>Java - Strings Class</h3>
<p>Strings, which are widely used in Java programming, are a sequence of characters. In Java programming language, strings are treated as objects.</p>

<p>The Java platform provides the String class to create and manipulate strings.</p>

<h3>Creating Strings</h3>
<p>The most direct way to create a string is to write −</p>

String greeting = "Hello world!";
<p>Whenever it encounters a string literal in your code, the compiler creates a String object with its value in this case, "Hello world!'.</p>

<p>As with any other object, you can create String objects by using the new keyword and a constructor. The String class has 11 constructors that allow you to provide the initial value of the string using different sources, such as an array of characters.</p>

<h3>Java - Arrays</h3>

<p>Java provides a data structure, the array, which stores a fixed-size sequential collection of elements of the same type. An array is used to store a collection of data, but it is often more useful to think of an array as a collection of variables of the same type.</p>

<p>Instead of declaring individual variables, such as number0, number1, ..., and number99, you declare one array variable such as numbers and use numbers[0], numbers[1], and ..., numbers[99] to represent individual variables.</p>

<p>This tutorial introduces how to declare array variables, create arrays, and process arrays using indexed variables.</p>

<h3>Declaring Array Variables</h3>
<p>To use an array in a program, you must declare a variable to reference the array, and you must specify the type of array the variable can reference. Here is the syntax for declaring an array variable −<br>

Syntax<br>
dataType[] arrayRefVar;   // preferred way.<br>
or<br>
dataType arrayRefVar[];  // works but not preferred way.</p>
<p>Note − The style dataType[] arrayRefVar is preferred. The style dataType arrayRefVar[] comes from the C/C++ language and was adopted in Java to accommodate C/C++ programmers.</p>

<h3>The Arrays Class</h3>
<p>The java.util.Arrays class contains various static methods for sorting and searching arrays, comparing arrays, and filling array elements. These methods are overloaded for all primitive types.</p>
<table>
<tr>
<th>Sr.No.</th>	<th>Method & Description</th>
</tr>
<tr>
<td>1</td>
<td>public static int binarySearch(Object[] a, Object key)<br>

Searches the specified array of Object ( Byte, Int , double, etc.) for the specified value using the binary search algorithm. The array must be sorted prior to making this call. This returns index of the search key, if it is contained in the list; otherwise, it returns ( – (insertion point + 1)).</td>
</tr>
<tr>
<td>2</td>	
<td>public static boolean equals(long[] a, long[] a2)<br>

Returns true if the two specified arrays of longs are equal to one another. Two arrays are considered equal if both arrays contain the same number of elements, and all corresponding pairs of elements in the two arrays are equal. This returns true if the two arrays are equal. Same method could be used by all other primitive data types (Byte, short, Int, etc.)</td>
</tr>
<tr>
<td>3</td>	
<td>public static void fill(int[] a, int val)<br>

Assigns the specified int value to each element of the specified array of ints. The same method could be used by all other primitive data types (Byte, short, Int, etc.)</td>
</tr>
<td>4</td>	
<td>public static void sort(Object[] a)<br>

Sorts the specified array of objects into an ascending order, according to the natural ordering of its elements. The same method could be used by all other primitive data types ( Byte, short, Int, etc.)</td>
</tr>
</table>
<br>

<h3>Java - Date and Time</h3>
<p>Java provides the Date class available in java.util package, this class encapsulates the current date and time.</p>

<p>The Date class supports two constructors as shown in the following table.</p>
<table>
<tr>
<th>Sr.No.</th>	<th>Constructor & Description</th>
</tr>
<tr>
<td>1</td>	
<td>Date( )<br>

This constructor initializes the object with the current date and time.</td>
</tr>
<tr>
<td>2</td>	
<td>Date(long millisec)<br>

This constructor accepts an argument that equals the number of milliseconds that have elapsed since midnight, January 1, 1970.</td>
</tr>
</table>
<br>

<h3>Date Comparison</h3>
<p>Following are the three ways to compare two dates −</p>
<ul>
<li>You can use getTime( ) to obtain the number of milliseconds that have elapsed since midnight, January 1, 1970, for both objects and then compare these two values.

<li>You can use the methods before( ), after( ), and equals( ). Because the 12th of the month comes before the 18th, for example, new Date(99, 2, 12).before(new Date (99, 2, 18)) returns true.

<li>You can use the compareTo( ) method, which is defined by the Comparable interface and implemented by Date.
</ul>

<h3>Java - Regular Expressions</h3>
<p>Java provides the java.util.regex package for pattern matching with regular expressions. Java regular expressions are very similar to the Perl programming language and very easy to learn.</p>

<p>A regular expression is a special sequence of characters that helps you match or find other strings or sets of strings, using a specialized syntax held in a pattern. They can be used to search, edit, or manipulate text and data.</p>

<p>The java.util.regex package primarily consists of the following three classes −</p>
<ul>
<li><b>Pattern Class −</b> A Pattern object is a compiled representation of a regular expression. The Pattern class provides no public constructors. To create a pattern, you must first invoke one of its public static compile() methods, which will then return a Pattern object. These methods accept a regular expression as the first argument.

<li><b>Matcher Class −</b> A Matcher object is the engine that interprets the pattern and performs match operations against an input string. Like the Pattern class, Matcher defines no public constructors. You obtain a Matcher object by invoking the matcher() method on a Pattern object.

<li><b>PatternSyntaxException −</b> A PatternSyntaxException object is an unchecked exception that indicates a syntax error in a regular expression pattern.
</ul>

<h3>Java - Methods</h3>
<p>A Java method is a collection of statements that are grouped together to perform an operation. When you call the System.out.println() method, for example, the system actually executes several statements in order to display a message on the console.</p>

<h3>Method Calling</h3>
<p>For using a method, it should be called. There are two ways in which a method is called i.e., method returns a value or returning nothing (no return value).</p>

<p>The process of method calling is simple. When a program invokes a method, the program control gets transferred to the called method. This called method then returns control to the caller in two conditions, when −</p>
<ul>
<li>the return statement is executed.
<li>it reaches the method ending closing brace.
</ul>
<p>The methods returning void is considered as call to a statement. </p>

<h3>The void Keyword</h3>
<p>The void keyword allows us to create methods which do not return a value. Here, in the following example we're considering a void method methodRankPoints. This method is a void method, which does not return any value. Call to a void method must be a statement i.e. methodRankPoints(255.7);. </p>

<h3>Passing Parameters by Value</h3>
<p>While working under calling process, arguments is to be passed. These should be in the same order as their respective parameters in the method specification. Parameters can be passed by value or by reference.</p>

<p>Passing Parameters by Value means calling a method with a parameter. Through this, the argument value is passed to the parameter.</p>

<h3>Method Overloading</h3>
<p>When a class has two or more methods by the same name but different parameters, it is known as method overloading. It is different from overriding. In overriding, a method has the same method name, type, number of parameters, etc.</p>

<h3>Using Command-Line Arguments</h3>
<p>Sometimes you will want to pass some information into a program when you run it. This is accomplished by passing command-line arguments to main( ).</p>

<p>A command-line argument is the information that directly follows the program's name on the command line when it is executed. To access the command-line arguments inside a Java program is quite easy. They are stored as strings in the String array passed to main( ).</p>

<h3>The this keyword</h3>
<p>this is a keyword in Java which is used as a reference to the object of the current class, with in an instance method or a constructor. Using this you can refer the members of a class such as constructors, variables and methods.</p>
<p>In general, the keyword this is used to −</p>
<ul>
<li>Differentiate the instance variables from local variables if they have same names, within a constructor or a method.
<li>Call one type of constructor (Parameterized constructor or default) from other in a class. It is known as explicit constructor invocation.
</ul>

<h3>The finalize( ) Method</h3>
<p>It is possible to define a method that will be called just before an object's final destruction by the garbage collector. This method is called finalize( ), and it can be used to ensure that an object terminates cleanly.</p>

<p>For example, you might use finalize( ) to make sure that an open file owned by that object is closed.</p>

<p>To add a finalizer to a class, you simply define the finalize( ) method. The Java runtime calls that method whenever it is about to recycle an object of that class.</p>

<p>Inside the finalize( ) method, you will specify those actions that must be performed before an object is destroyed.</p>

<h3>Java - Files and I/O</h3>
<p>The java.io package contains nearly every class you might ever need to perform input and output (I/O) in Java. All these streams represent an input source and an output destination. The stream in the java.io package supports many data such as primitives, object, localized characters, etc.</p>

<h3>Stream</h3>
<p>A stream can be defined as a sequence of data. There are two kinds of Streams −</p>
<ul>
<li><b>InPutStream − </b>The InputStream is used to read data from a source.

<li><b>OutPutStream − </b>The OutputStream is used for writing data to a destination.
</ul>
<p>Java provides strong but flexible support for I/O related to files and networks but this tutorial covers very basic functionality related to streams and I/O. </p>

<h3>File Navigation and I/O</h3>
<p>There are several other classes that we would be going through to get to know the basics of File Navigation and I/O.</p>
<ul>
<li>File Class

<li>FileReader Class

<li>FileWriter Class
</ul>